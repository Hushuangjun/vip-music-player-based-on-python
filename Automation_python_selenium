Rough Description: In last file, i edit the main codes that are used to make a video player. Therefore, the following codes is an illustration concerned about how to automatically 
acquire online resources by python'selenium and so on. There is no escaping the fact that others'help are highly appreciated!

Codes:
from selenium import webdriver
from selenium.webdriver import ActionChains
from time import sleep
import cv2
import requests
import numpy as np
browser = webdriver.Firefox()
browser.get("https://www.zhihu.com/signin?next=%2F")

#换成密码登录页面
change_ = browser.find_element_by_xpath("/html/body/div[1]/div/main/div/div/div/div[1]/div/div[1]/form/div[1]/div[2]")
change_.click()
#标签定位
account_input = browser.find_element_by_xpath("/html/body/div[1]/div/main/div/div/div/div[1]/div/div[1]/form/div[2]/div/label/input")
code_input = browser.find_element_by_xpath("/html/body/div[1]/div/main/div/div/div/div[1]/div/div[1]/form/div[3]/div/label/input")

account_input.send_keys("19892183631")
sleep(2)
code_input.send_keys("25256363123hsj")

sleep(3)
sign_in = browser.find_element_by_xpath(
    "/html/body/div[1]/div/main/div/div/div/div[1]/div/div[1]/form/button"
)

sign_in.click()
sleep(2)
#不在iframe里，不用switch... 所以可以直接find.
#当iframe中没有id时，可以先用find找到他，再用switch..
#illustration:  iframe = browser.find_....
#browser.switch...

# 获取背景图和滑块图的url
background_image_url=browser.find_element_by_xpath("/html/body/div[4]/div[2]/div/div/div[2]/div/div[1]/div/div[1]/img[1]").get_attribute('src')
slider_image_url=browser.find_element_by_xpath('/html/body/div[4]/div[2]/div/div/div[2]/div/div[1]/div/div[1]/img[2]').get_attribute('src')
# 下载图片到本地
def get_image(img_url,imgname):
    # 以流的形式下载文件
    image=requests.get(img_url,stream=True)
    # str.join()方法用于将序列中的元素以指定的字符(str)连接生成一个新的字符串
    imgName = ''.join(["./", imgname])
    with open(imgName, 'wb') as f:
        for chunk in image.iter_content(chunk_size=1024): # 循环写入  chunk_size：每次下载的数据大小
            if chunk:
                f.write(chunk)
                f.flush()
        f.close()


# 使用opencv模块 计算缺口的偏移值
def get_image_offset(background_image_url, slider_image_url):
    back_image = 'back_image.png'  # 背景图像命名
    slider_image = 'slider_image.png'  # 滑块图像命名
    get_image(background_image_url, back_image)
    get_image(slider_image_url, slider_image)
    # 获取图片并灰度化
    block = cv2.imread(slider_image, 0)
    template = cv2.imread(back_image, 0)
    w, h = block.shape[::-1]
    print(w, h)
    # 二值化后图片名称
    block_name = 'block.jpg'
    template_name = 'template.jpg'
    # 保存二值化后的图片
    cv2.imwrite(block_name, block)
    cv2.imwrite(template_name, template)
    block = cv2.imread(block_name)
    block = cv2.cvtColor(block, cv2.COLOR_RGB2GRAY)
    block = abs(255 - block)
    cv2.imwrite(block_name, block)
    block = cv2.imread(block_name)
    template = cv2.imread(template_name)
    # 获取偏移量
    # 模板匹配，查找block在template中的位置，返回result是一个矩阵，是每个点的匹配结果
    result = cv2.matchTemplate(block, template, cv2.TM_CCOEFF_NORMED)
    x, y = np.unravel_index(result.argmax(), result.shape)
    print(x, y)
    # 由于获取到的验证码图片像素与实际的像素有差(实际：280*158 原图：680*390)，故对获取到的坐标进行处理
    offset = y * (60 / 320)
    # 画矩形圈出匹配的区域
    # 参数解释：1.原图 2.矩阵的左上点坐标 3.矩阵的右下点坐标 4.画线对应的rgb颜色 5.线的宽度
    cv2.rectangle(template, (y, x), (y + w, x + h), (7, 249, 151), 2)
    #show(template)
    return offset


# 显示图片
def show(name):
    cv2.imshow('Show', name)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

distance = get_image_offset(background_image_url, slider_image_url)
print(distance)

button = browser.find_element_by_xpath("/html/body/div[4]/div[2]/div/div/div[2]/div/div[2]/div[2]")

#动作链
action = ActionChains(browser)
#点击并且长按指定的标签
action.click_and_hold(button)

for i in range(10):
    action.move_by_offset(distance/10,0).perform()
    sleep(2)

action.release().perform()



